(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{1073:function(t,s,a){"use strict";a.r(s);var n=a(3),_=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript学习笔记-二十二-原型及原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript学习笔记-二十二-原型及原型链"}},[t._v("#")]),t._v(" JavaScript学习笔记（二十二）-- 原型及原型链")]),t._v(" "),a("h2",{attrs:{id:"原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" "),a("strong",[t._v("原型")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原型的出现，就是为了解决 "),a("strong",[t._v("构造函数的缺点")])])]),t._v(" "),a("li",[a("p",[t._v("也就是给我们提供了一个给对象添加函数的方法")])]),t._v(" "),a("li",[a("p",[t._v("不然构造函数只能给对象添加属性，不能合理的添加函数就太 LOW 了")])])]),t._v(" "),a("h3",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" "),a("strong",[t._v("prototype")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("每一个函数天生自带一个成员，叫做 prototype，是一个对象空间")])])]),t._v(" "),a("li",[a("p",[t._v("即然每一个函数都有，构造函数也是函数，构造函数也有这个对象空间")])]),t._v(" "),a("li",[a("p",[t._v("这个 "),a("code",[t._v("prototype")]),t._v(" 对象空间可以由函数名来访问")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是一个对象")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("即然是个对象，那么我们就可以向里面放入一些东西")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prototype'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("我们发现了一个叫做 "),a("code",[t._v("prototype")]),t._v(" 的空间是和函数有关联的")])]),t._v(" "),a("li",[a("p",[t._v("并且可以向里面存储一些东西")])]),t._v(" "),a("li",[a("p",[t._v("重点： "),a("strong",[t._v("在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的")])])]),t._v(" "),a("li",[a("p",[t._v("那实例化对象怎么使用能？")])])]),t._v(" "),a("h3",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),a("strong",[a("strong",[t._v("proto")])])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("每一个对象都天生自带一个成员，叫做")]),t._v(" "),a("code",[t._v("**__proto__**")]),a("strong",[t._v("，是一个对象空间")])])]),t._v(" "),a("li",[a("p",[t._v("即然每一个对象都有，实例化对象也是对象，那么每一个实例化对象也有这个成员")])]),t._v(" "),a("li",[a("p",[t._v("这个 "),a("code",[t._v("__proto__")]),t._v(" 对象空间是给每一个对象使用的")])]),t._v(" "),a("li",[a("p",[t._v("当你访问一个对象中的成员的时候")])]),t._v(" "),a("li",[a("p",[t._v("如果这个对象自己本身有这个成员，那么就会直接给你结果")])]),t._v(" "),a("li",[a("p",[t._v("如果没有，就会去 "),a("code",[t._v("__proto__")]),t._v(" 这个对象空间里面找，里面有的话就给你结果")])]),t._v(" "),a("li",[a("p",[t._v("未完待续。。。")])]),t._v(" "),a("li",[a("p",[t._v("那么这个 "),a("code",[t._v("__proto__")]),t._v(" 又指向哪里呢？")])]),t._v(" "),a("li",[a("p",[t._v("这个对象是由哪个构造函数 new 出来的")])]),t._v(" "),a("li",[a("p",[t._v("那么这个对象的 "),a("code",[t._v("__proto__")]),t._v(" 就指向这个构造函数的 "),a("code",[t._v("prototype")])])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("我们发现实例化对象的 "),a("code",[t._v("__proto__")]),t._v(" 和所属的构造函数的 "),a("code",[t._v("prototype")]),t._v(" 是一个对象空间")])]),t._v(" "),a("li",[a("p",[t._v("我们可以通过构造函数名称来向 "),a("code",[t._v("prototype")]),t._v(" 中添加成员")])]),t._v(" "),a("li",[a("p",[t._v("对象在访问的时候自己没有，可以自动去自己的 "),a("code",[t._v("__proto__")]),t._v(" 中查找")])]),t._v(" "),a("li",[a("p",[t._v("那么，我们之前构造函数的缺点就可以解决了")])]),t._v(" "),a("li",[a("p",[t._v("我们可以把函数放在构造函数的 "),a("code",[t._v("prototype")]),t._v(" 中")])]),t._v(" "),a("li",[a("p",[t._v("实例化对象访问的时候，自己没有，就会自动去 "),a("code",[t._v("__proto__")]),t._v(" 中找")])]),t._v(" "),a("li",[a("p",[t._v("那么也可以使用了")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello Person'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[a("p",[a("code",[t._v("p1")]),t._v(" 自己没有 "),a("code",[t._v("sayHi")]),t._v(" 方法，就会去自己的 "),a("code",[t._v("__proto__")]),t._v(" 中查找")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("p1.__proto__")]),t._v(" 就是 "),a("code",[t._v("Person.prototype")])])]),t._v(" "),a("li",[a("p",[t._v("我们又向 "),a("code",[t._v("Person.prototype")]),t._v(" 中添加了 "),a("code",[t._v("sayHi")]),t._v(" 方法")])]),t._v(" "),a("li",[a("p",[t._v("所以 "),a("code",[t._v("p1.sayHi")]),t._v(" 就可以执行了")])]),t._v(" "),a("li",[a("p",[t._v("到这里，当我们实例化多个对象的时候，每个对象里面都没有方法")])]),t._v(" "),a("li",[a("p",[t._v("都是去所属的构造函数的 "),a("code",[t._v("protottype")]),t._v(" 中查找")])]),t._v(" "),a("li",[a("p",[t._v("那么每一个对象使用的函数，其实都是同一个函数")])]),t._v(" "),a("li",[a("p",[t._v("那么就解决了我们构造函数的缺点")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sayHi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sayHi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[a("code",[t._v("p1")]),t._v(" 是 "),a("code",[t._v("Person")]),t._v(" 的一个实例")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("p2")]),t._v(" 是 "),a("code",[t._v("Person")]),t._v(" 的一个实例")])]),t._v(" "),a("li",[a("p",[t._v("也就是说 "),a("code",[t._v("p1.__proto__")]),t._v(" 和 "),a("code",[t._v("p2.__proto__")]),t._v(" 指向的都是 "),a("code",[t._v("Person.prototype")])])]),t._v(" "),a("li",[a("p",[t._v("当 "),a("code",[t._v("p1")]),t._v(" 去调用 "),a("code",[t._v("sayHi")]),t._v(" 方法的时候是去 "),a("code",[t._v("Person.prototype")]),t._v(" 中找")])]),t._v(" "),a("li",[a("p",[t._v("当 "),a("code",[t._v("p2")]),t._v(" 去调用 "),a("code",[t._v("sayHi")]),t._v(" 方法的时候是去 "),a("code",[t._v("Person.prototype")]),t._v(" 中找")])]),t._v(" "),a("li",[a("p",[t._v("那么两个实例化对象就是找到的一个方法，也是执行的一个方法")])]),t._v(" "),a("li",[a("p",[t._v("结论")])]),t._v(" "),a("li",[a("p",[t._v("当我们写构造函数的时候")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("属性我们直接写在构造函数体内")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("方法我们写在原型上")])])])]),t._v(" "),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" "),a("strong",[t._v("原型链")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们刚才聊过构造函数了，也聊了原型")])]),t._v(" "),a("li",[a("p",[t._v("那么问题出现了，我们说构造函数的 "),a("code",[t._v("prototype")]),t._v(" 是一个对象")])]),t._v(" "),a("li",[a("p",[t._v("又说了每一个对象都天生自带一个 "),a("code",[t._v("__proto__")]),t._v(" 属性")])]),t._v(" "),a("li",[a("p",[t._v("那么 "),a("strong",[t._v("构造函数的 prototype")]),t._v(" 里面的 "),a("code",[t._v("__proto__")]),t._v(" 属性又指向哪里呢？")])])]),t._v(" "),a("h3",{attrs:{id:"一个对象所属的构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个对象所属的构造函数"}},[t._v("#")]),t._v(" "),a("strong",[t._v("一个对象所属的构造函数")])]),t._v(" "),a("ul",[a("li",[t._v("每一个对象都有一个自己所属的构造函数")]),t._v(" "),a("li",[t._v("比如： 数组")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组本身也是一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("以上两种方式都是创造一个数组")])]),t._v(" "),a("li",[a("p",[t._v("我们就说数组所属的构造函数就是 "),a("code",[t._v("Array")])])]),t._v(" "),a("li",[a("p",[t._v("比如： 函数")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数本身也是一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("以上两种方式都是创造一个函数")]),t._v(" "),a("li",[t._v("我们就说函数所属的构造函数就是 "),a("code",[t._v("Function")])])]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" "),a("strong",[t._v("constructor")])]),t._v(" "),a("ul",[a("li",[t._v("对象的 "),a("code",[t._v("__proto__")]),t._v(" 里面也有一个成员叫做 "),a("code",[t._v("**constructor**")])]),t._v(" "),a("li",[t._v("这个属性就是指向当前这个对象所属的构造函数")])]),t._v(" "),a("h3",{attrs:{id:"链状结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链状结构"}},[t._v("#")]),t._v(" "),a("strong",[t._v("链状结构")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当一个对象我们不知道准确的是谁构造的时候，我们呢就把它看成 "),a("code",[t._v("Object")]),t._v(" 的实例化对象")])]),t._v(" "),a("li",[a("p",[t._v("也就是说，我们的 "),a("strong",[t._v("构造函数 的 prototype 的")]),t._v(" "),a("code",[t._v("**__proto__**")]),t._v(" 指向的是 "),a("code",[t._v("Object.prototype")])])]),t._v(" "),a("li",[a("p",[t._v("那么 "),a("code",[t._v("Object.prototype")]),t._v(" 也是个对象，那么它的 "),a("code",[t._v("__proto__")]),t._v(" 又指向谁呢？")])]),t._v(" "),a("li",[a("p",[t._v("因为 "),a("code",[t._v("Object")]),t._v(" 的 js 中的顶级构造函数，我们有一句话叫 "),a("strong",[t._v("万物皆对象")])])]),t._v(" "),a("li",[a("p",[t._v("所以 "),a("code",[t._v("Object.prototype")]),t._v(" 就到顶了，"),a("code",[t._v("Object.prototype")]),t._v(" 的 "),a("code",[t._v("__proto__")]),t._v(" 就是 null")])])]),t._v(" "),a("h3",{attrs:{id:"原型链的访问原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链的访问原则"}},[t._v("#")]),t._v(" "),a("strong",[t._v("原型链的访问原则")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们之前说过，访问一个对象的成员的时候，自己没有就会去 "),a("code",[t._v("__proto__")]),t._v(" 中找")])]),t._v(" "),a("li",[a("p",[t._v("接下来就是，如果 "),a("code",[t._v("__proto__")]),t._v(" 里面没有就再去 "),a("code",[t._v("__proto__")]),t._v(" 里面找")])]),t._v(" "),a("li",[a("p",[t._v("一直找到 "),a("code",[t._v("Object.prototype")]),t._v(" 里面都没有，那么就会返回 "),a("code",[t._v("undefiend")])])])]),t._v(" "),a("h3",{attrs:{id:"对象的赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的赋值"}},[t._v("#")]),t._v(" "),a("strong",[t._v("对象的赋值")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("到这里，我们就会觉得，如果是赋值的话，那么也会按照原型链的规则来")])]),t._v(" "),a("li",[a("p",[t._v("但是： "),a("strong",[t._v("并不是！并不是！并不是！")]),t._v(" 重要的事情说三遍")])]),t._v(" "),a("li",[a("p",[t._v("赋值的时候，就是直接给对象自己本身赋值")])]),t._v(" "),a("li",[a("p",[t._v("如果原先有就是修改")])]),t._v(" "),a("li",[a("p",[t._v("原先没有就是添加")])]),t._v(" "),a("li",[a("p",[t._v("不会和 "),a("code",[t._v("__proto__")]),t._v(" 有关系")])])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),a("strong",[t._v("总结")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("到了这里，我们就发现了面向对象的思想模式了")])]),t._v(" "),a("li",[a("p",[t._v("当我想完成一个功能的时候")])]),t._v(" "),a("li",[a("p",[t._v("先看看内置构造函数有没有能给我提供一个完成功能对象的能力")])]),t._v(" "),a("li",[a("p",[t._v("如果没有，我们就自己写一个构造函数，能创造出一个完成功能的对象")])]),t._v(" "),a("li",[a("p",[t._v("然后在用我们写的构造函数 new 一个对象出来，帮助我们完成功能就行了")])]),t._v(" "),a("li",[a("p",[t._v("比如： tab选项卡")])]),t._v(" "),a("li",[a("p",[t._v("我们要一个对象")])]),t._v(" "),a("li",[a("p",[t._v("对象包含一个属性：是每一个点击的按钮")])]),t._v(" "),a("li",[a("p",[t._v("对象包含一个属性：是每一个切换的盒子")])]),t._v(" "),a("li",[a("p",[t._v("对象包含一个方法：是点击按钮能切换盒子的能力")])]),t._v(" "),a("li",[a("p",[t._v("那么我们就需要自己写一个构造函数，要求 new 出来的对象有这些内容就好了")])]),t._v(" "),a("li",[a("p",[t._v("然后在用构造函数 new 一个对象就行了")])])])])}),[],!1,null,null,null);s.default=_.exports}}]);